type Activity {
  id: ID!
  name: String!
  dataFields: [String!]!
}

type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreatedataFieldsInput {
  set: [String!]
}

input ActivityCreateInput {
  id: ID
  name: String!
  dataFields: ActivityCreatedataFieldsInput
}

input ActivityCreateOneInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
}

type ActivityEdge {
  node: Activity!
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ActivityPreviousValues {
  id: ID!
  name: String!
  dataFields: [String!]!
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
  AND: [ActivitySubscriptionWhereInput!]
  OR: [ActivitySubscriptionWhereInput!]
  NOT: [ActivitySubscriptionWhereInput!]
}

input ActivityUpdatedataFieldsInput {
  set: [String!]
}

input ActivityUpdateDataInput {
  name: String
  dataFields: ActivityUpdatedataFieldsInput
}

input ActivityUpdateInput {
  name: String
  dataFields: ActivityUpdatedataFieldsInput
}

input ActivityUpdateManyMutationInput {
  name: String
  dataFields: ActivityUpdatedataFieldsInput
}

input ActivityUpdateOneRequiredInput {
  create: ActivityCreateInput
  update: ActivityUpdateDataInput
  upsert: ActivityUpsertNestedInput
  connect: ActivityWhereUniqueInput
}

input ActivityUpsertNestedInput {
  update: ActivityUpdateDataInput!
  create: ActivityCreateInput!
}

input ActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type AggregateDataField {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type DataField {
  id: ID!
  dataName: String!
  dataValue: String
}

type DataFieldConnection {
  pageInfo: PageInfo!
  edges: [DataFieldEdge]!
  aggregate: AggregateDataField!
}

input DataFieldCreateInput {
  id: ID
  dataName: String!
  dataValue: String
}

type DataFieldEdge {
  node: DataField!
  cursor: String!
}

enum DataFieldOrderByInput {
  id_ASC
  id_DESC
  dataName_ASC
  dataName_DESC
  dataValue_ASC
  dataValue_DESC
}

type DataFieldPreviousValues {
  id: ID!
  dataName: String!
  dataValue: String
}

type DataFieldSubscriptionPayload {
  mutation: MutationType!
  node: DataField
  updatedFields: [String!]
  previousValues: DataFieldPreviousValues
}

input DataFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataFieldWhereInput
  AND: [DataFieldSubscriptionWhereInput!]
  OR: [DataFieldSubscriptionWhereInput!]
  NOT: [DataFieldSubscriptionWhereInput!]
}

input DataFieldUpdateInput {
  dataName: String
  dataValue: String
}

input DataFieldUpdateManyMutationInput {
  dataName: String
  dataValue: String
}

input DataFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dataName: String
  dataName_not: String
  dataName_in: [String!]
  dataName_not_in: [String!]
  dataName_lt: String
  dataName_lte: String
  dataName_gt: String
  dataName_gte: String
  dataName_contains: String
  dataName_not_contains: String
  dataName_starts_with: String
  dataName_not_starts_with: String
  dataName_ends_with: String
  dataName_not_ends_with: String
  dataValue: String
  dataValue_not: String
  dataValue_in: [String!]
  dataValue_not_in: [String!]
  dataValue_lt: String
  dataValue_lte: String
  dataValue_gt: String
  dataValue_gte: String
  dataValue_contains: String
  dataValue_not_contains: String
  dataValue_starts_with: String
  dataValue_not_starts_with: String
  dataValue_ends_with: String
  dataValue_not_ends_with: String
  AND: [DataFieldWhereInput!]
  OR: [DataFieldWhereInput!]
  NOT: [DataFieldWhereInput!]
}

input DataFieldWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity!
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateManyActivities(data: ActivityUpdateManyMutationInput!, where: ActivityWhereInput): BatchPayload!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  createDataField(data: DataFieldCreateInput!): DataField!
  updateDataField(data: DataFieldUpdateInput!, where: DataFieldWhereUniqueInput!): DataField
  updateManyDataFields(data: DataFieldUpdateManyMutationInput!, where: DataFieldWhereInput): BatchPayload!
  upsertDataField(where: DataFieldWhereUniqueInput!, create: DataFieldCreateInput!, update: DataFieldUpdateInput!): DataField!
  deleteDataField(where: DataFieldWhereUniqueInput!): DataField
  deleteManyDataFields(where: DataFieldWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  CLUB_ADMIN
  USER
  FRIEND
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  dataField(where: DataFieldWhereUniqueInput!): DataField
  dataFields(where: DataFieldWhereInput, orderBy: DataFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataField]!
  dataFieldsConnection(where: DataFieldWhereInput, orderBy: DataFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataFieldConnection!
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Session {
  id: ID!
  date: String!
  name: String!
  user: User!
  activityType: Activity!
  dataValues: Json!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  date: String!
  name: String!
  user: UserCreateOneInput!
  activityType: ActivityCreateOneInput!
  dataValues: Json!
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  name_ASC
  name_DESC
  dataValues_ASC
  dataValues_DESC
}

type SessionPreviousValues {
  id: ID!
  date: String!
  name: String!
  dataValues: Json!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateInput {
  date: String
  name: String
  user: UserUpdateOneRequiredInput
  activityType: ActivityUpdateOneRequiredInput
  dataValues: Json
}

input SessionUpdateManyMutationInput {
  date: String
  name: String
  dataValues: Json
}

input SessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  activityType: ActivityWhereInput
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

input SessionWhereUniqueInput {
  id: ID
}

type Subscription {
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  dataField(where: DataFieldSubscriptionWhereInput): DataFieldSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  club: String!
  permissions: [Permission!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  club: String!
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  club_ASC
  club_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  club: String!
  permissions: [Permission!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  club: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  club: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  club: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  club: String
  club_not: String
  club_in: [String!]
  club_not_in: [String!]
  club_lt: String
  club_lte: String
  club_gt: String
  club_gte: String
  club_contains: String
  club_not_contains: String
  club_starts_with: String
  club_not_starts_with: String
  club_ends_with: String
  club_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
